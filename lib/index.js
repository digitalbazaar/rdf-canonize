/**
 * An implementation of the RDF Dataset Normalization specification.
 * This library works in the browser and node.js.
 *
 * BSD 3-Clause License
 * Copyright (c) 2016-2023 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
'use strict';

const URDNA2015 = require('./URDNA2015');
const URDNA2015Sync = require('./URDNA2015Sync');

// optional native support
let rdfCanonizeNative;
try {
  rdfCanonizeNative = require('rdf-canonize-native');
} catch(e) {}

// return a dataset from input dataset or n-quads
function _inputToDataset(input, options) {
  if(options.inputFormat) {
    if(options.inputFormat === 'application/n-quads') {
      return exports.NQuads.parse(input);
    }
    throw new Error(
      `Unknown canonicalization input format: "${options.inputFormat}".`);
  }
  return input;
}

// check for valid output format
function _checkOutputFormat(options) {
  // only N-Quads supported
  if(options.format) {
    if(options.format !== 'application/n-quads') {
      throw new Error(
        `Unknown canonicalization output format: "${options.format}".`);
    }
  }
}

// helper to trace URDNA2015 usage
function _traceURDNA2015() {
  if(!!globalThis.RDF_CANONIZE_TRACE_URDNA2015) {
    console.trace('[rdf-canonize] URDNA2015 is deprecated, use RDFC-1.0');
  }
}

// expose helpers
exports.NQuads = require('./NQuads');
exports.IdentifierIssuer = require('./IdentifierIssuer');

/**
 * Get or set native API.
 *
 * @param {object} [api] - The native API.
 *
 * @returns {object} - The currently set native API.
 */
exports._rdfCanonizeNative = function(api) {
  if(api) {
    rdfCanonizeNative = api;
  }
  return rdfCanonizeNative;
};

/**
 * Asynchronously canonizes an RDF dataset.
 *
 * @param {Array|object|string} input - The input to canonize given as a
 *   dataset or format specified by 'inputFormat' option.
 * @param {object} options - The options to use:
 *   {string} algorithm - The canonicalization algorithm to use, `RDFC-1.0`.
 *   {Function} [createMessageDigest] - A factory function for creating a
 *     `MessageDigest` interface that overrides the built-in message digest
 *     implementation used by the canonize algorithm; note that using a hash
 *     algorithm (or HMAC algorithm) that differs from the one specified by
 *     the canonize algorithm will result in different output.
 *   {string} [messageDigestAlgorithm=sha256] - Message digest algorithm used
 *     by the default implementation of `createMessageDigest`. Supported
 *     algorithms are: 'sha256', 'sha384', 'sha512', and the 'SHA###' and
 *     'SHA-###' variations.
 *   {Map} [canonicalIdMap] - An optional Map to be populated by the canonical
 *     identifier issuer with the bnode identifier mapping generated by the
 *     canonicalization algorithm.
 *   {string} [inputFormat] - The format of the input. Use
 *     'application/n-quads' for a N-Quads string that will be parsed. Omit or
 *     falsy for a JSON dataset.
 *   {string} [format] - The format of the output. Omit or use
 *     'application/n-quads' for a N-Quads string.
 *   {boolean} [useNative=false] - Use native implementation.
 *   {number} [maxDeepIterations=Infinity] - The maximum number of times to run
 *     deep comparison algorithms (such as the N-Degree Hash Quads algorithm
 *     used in RDFC-1.0) before bailing out and throwing an error; this is a
 *     useful setting for preventing wasted CPU cycles or DoS when canonizing
 *     meaningless or potentially malicious datasets, a recommended value is
 *     `1`.
 *   {AbortSignal} [signal] - An AbortSignal used to abort the operation. The
 *     aborted status is only periodically checked for performance reasons.
 *     The default is to timeout after 1s. Use null to disable.
 *   {boolean} [rejectURDNA2015=false] - Reject the "URDNA2015" algorithm name
 *     instead of treating it as an alias for "RDFC-1.0".
 *
 * @returns {Promise<object>} - A Promise that resolves to the canonicalized
 *   RDF Dataset.
 */
exports.canonize = async function(input, options) {
  const dataset = _inputToDataset(input, options);
  _checkOutputFormat(options);

  if(options.useNative) {
    if(!rdfCanonizeNative) {
      throw new Error('rdf-canonize-native not available');
    }
    if(options.createMessageDigest) {
      throw new Error(
        '"createMessageDigest" cannot be used with "useNative".');
    }
    return new Promise((resolve, reject) =>
      rdfCanonizeNative.canonize(dataset, options, (err, canonical) =>
        err ? reject(err) : resolve(canonical)));
  }

  if(!('algorithm' in options)) {
    throw new Error('No RDF Dataset Canonicalization algorithm specified.');
  }
  if(options.algorithm === 'RDFC-1.0') {
    return new URDNA2015(options).main(dataset);
  }
  // URDNA2015 deprecated, handled as alias for RDFC-1.0 if allowed
  if(options.algorithm === 'URDNA2015' && !options.rejectURDNA2015) {
    _traceURDNA2015();
    return new URDNA2015(options).main(dataset);
  }
  throw new Error(
    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
};

/**
 * This method is no longer available in the public API, it is for testing
 * only. It synchronously canonizes an RDF dataset and does not work in the
 * browser.
 *
 * @param {Array|object|string} input - The input to canonize given as a
 *   dataset or format specified by 'inputFormat' option.
 * @param {object} options - The options to use:
 *   {string} algorithm - The canonicalization algorithm to use, `RDFC-1.0`.
 *   {Function} [createMessageDigest] - A factory function for creating a
 *     `MessageDigest` interface that overrides the built-in message digest
 *     implementation used by the canonize algorithm; note that using a hash
 *     algorithm (or HMAC algorithm) that differs from the one specified by
 *     the canonize algorithm will result in different output.
 *   {string} [messageDigestAlgorithm=sha256] - Message digest algorithm used
 *     by the default implementation of `createMessageDigest`. Supported
 *     algorithms are: 'sha256', 'sha384', 'sha512', and the 'SHA###' and
 *     'SHA-###' variations.
 *   {Map} [canonicalIdMap] - An optional Map to be populated by the canonical
 *     identifier issuer with the bnode identifier mapping generated by the
 *     canonicalization algorithm.
 *   {string} [inputFormat] - The format of the input. Use
 *     'application/n-quads' for a N-Quads string that will be parsed. Omit or
 *     falsy for a JSON dataset.
 *   {string} [format] - The format of the output. Omit or use
 *     'application/n-quads' for a N-Quads string.
 *   {boolean} [useNative=false] - Use native implementation.
 *   {number} [maxDeepIterations=Infinity] - The maximum number of times to run
 *     deep comparison algorithms (such as the N-Degree Hash Quads algorithm
 *     used in RDFC-1.0) before bailing out and throwing an error; this is a
 *     useful setting for preventing wasted CPU cycles or DoS when canonizing
 *     meaningless or potentially malicious datasets, a recommended value is
 *     `1`.
 *   {number} [timeout=1000] - The maximum number of milliseconds before the
 *     operation will timeout. This is only periodically checked for
 *     performance reasons. Use 0 to disable. Note: This is a replacement for
 *     the async canonize `signal` option common timeout use case. If complex
 *     abort logic is required, use the async function and the `signal`
 *     parameter.
 *   {boolean} [rejectURDNA2015=false] - Reject the "URDNA2015" algorithm name
 *     instead of treating it as an alias for "RDFC-1.0".
 *
 * @returns {Promise<object>} - A Promise that resolves to the canonicalized
 *   RDF Dataset.
 */
exports._canonizeSync = function(input, options) {
  const dataset = _inputToDataset(input, options);
  _checkOutputFormat(options);

  if(options.useNative) {
    if(!rdfCanonizeNative) {
      throw new Error('rdf-canonize-native not available');
    }
    if(options.createMessageDigest) {
      throw new Error(
        '"createMessageDigest" cannot be used with "useNative".');
    }
    return rdfCanonizeNative.canonizeSync(dataset, options);
  }
  if(!('algorithm' in options)) {
    throw new Error('No RDF Dataset Canonicalization algorithm specified.');
  }
  if(options.algorithm === 'RDFC-1.0') {
    return new URDNA2015Sync(options).main(dataset);
  }
  // URDNA2015 deprecated, handled as alias for RDFC-1.0 if allowed
  if(options.algorithm === 'URDNA2015' && !options.rejectURDNA2015) {
    _traceURDNA2015();
    return new URDNA2015Sync(options).main(dataset);
  }
  throw new Error(
    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
};
